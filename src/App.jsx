
const emptySelection = {frontend:[], backend:[], database:[], tools:[], aiFrameworks:[], llmProviders:[], protocols:[]};

/**
 * Main GenAppXpress wizard app
 * - Accessibility: ARIA roles, keyboard navigation
 * - Persistence: localStorage for theme and selections
 * - JSDoc/type comments for all major functions
 */
export default function App() {
  // State hooks with localStorage persistence for theme and templates
  const [currentStep, setCurrentStep] = useState(1);
  const [projectName, setProjectName] = useState('my-awesome-project');
  const [description, setDescription] = useState('An awesome project generated by GenAppXpress');
  const [author, setAuthor] = useState('');
  const [license, setLicense] = useState('MIT');
  const [showTemplates, setShowTemplates] = useState(false);
  const [darkMode, setDarkMode] = useState(() => {
    const stored = localStorage.getItem('genappxpress-theme');
    if (stored) return stored === 'dark';
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  const [selected, setSelected] = useState(() => {
    const saved = localStorage.getItem('genappxpress-selected');
    return saved ? JSON.parse(saved) : emptySelection;
  });

  /**
   * Toggle selection for a technology category
   * @param {string} category
   * @param {string} id
   */
  function onToggle(category, id) {
    setSelected(function(prev) {
      var list = prev[category];
      var exists = list.indexOf(id) !== -1;
      var updated = { ...prev, [category]: exists ? list.filter(function(x){return x!==id;}) : list.concat(id) };
      localStorage.setItem('genappxpress-selected', JSON.stringify(updated));
      return updated;
    });
  }

  /**
   * Apply a template preset
   * @param {Object} preset
   */
  function applyTemplate(preset) {
    var updated = { ...selected };
    Object.keys(emptySelection).forEach(function(k){ updated[k] = preset[k] || selected[k]; });
    setSelected(updated);
    localStorage.setItem('genappxpress-selected', JSON.stringify(updated));
    setShowTemplates(false);
  }

  /**
   * Project config object
   */
  const cfg = useMemo(function(){ return { projectName, description, author, license, ...selected }; }, [projectName, description, author, license, selected]);
  const compat = useMemo(function(){ return checkCompatibility(selected); }, [selected]);
  const conflicts = compat.conflicts, warnings = compat.warnings;

  /**
   * Compute incompatibility for tech options
   */
  function computeIncompat(category, item) {
    if (category === 'frontend') {
      if (selected.backend.length) {
        return selected.backend.some(function (b) {
          var back = TECH_STACK.backend.find(function (t) { return t.id === b; });
          var ok = (back && back.compatible && back.compatible.indexOf(item.id) !== -1)
            || (item.compatible && item.compatible.indexOf(b) !== -1)
            || (item.compatible && item.compatible.indexOf('*') !== -1);
          return !ok;
        });
      }
    }
    return false;
  }

  /**
   * Toggle dark/light theme and persist
   */
  function toggleTheme() {
    var mode = !darkMode ? 'dark' : 'light';
    setDarkMode(!darkMode);
    document.documentElement.setAttribute('data-color-scheme', mode);
    localStorage.setItem('genappxpress-theme', mode);
  }

  /**
   * Can proceed to next step?
   */
  function canNext() {
    if (currentStep === 1) return projectName.trim().length > 2;
    if (currentStep === 2) return Object.values(selected).some(function(a){return a.length;});
    return true;
  }

  /**
   * Keyboard navigation for wizard steps
   */
  React.useEffect(function() {
    function handleKey(e) {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      if (e.key === 'ArrowRight') setCurrentStep(function(s){return Math.min(4, s + 1);});
      if (e.key === 'ArrowLeft') setCurrentStep(function(s){return Math.max(1, s - 1);});
      if (e.key === 'Escape' && showTemplates) setShowTemplates(false);
    }
    window.addEventListener('keydown', handleKey);
    return function() { window.removeEventListener('keydown', handleKey); };
  }, [showTemplates]);

  return (
    <div className="app-shell">
      <header>
        <div className="logo" aria-hidden>GX</div>
        <div className="title-block">
          <h1>GenAppXpress <span className="pill">ALPHA</span></h1>
          <div className="tagline">Visual fullâ€‘stack & agentic AI scaffolding Â· Export scripts & project files</div>
        </div>
        <button className="theme-toggle" onClick={toggleTheme} aria-label="Toggle color theme">{darkMode? 'Light Mode':'Dark Mode'}</button>
        <button className="secondary" onClick={()=>setShowTemplates(true)}>Templates</button>
      </header>
      <div className="wizard">
        <StepIndicators currentStep={currentStep} steps={["Project","Tech Stack","Summary","Generate"]} setStep={setCurrentStep} />
        <div className="wizard-panels">
          <div className={"wizard-step "+(currentStep===1?'active':'')}>
            <div className="section">
              <h2>Project Configuration</h2>
              <div className="inline-fields">
                <div className="field"><label htmlFor="name">Project Name</label><input id="name" value={projectName} onChange={e=>setProjectName(e.target.value)} placeholder="my-project" /></div>
                <div className="field"><label htmlFor="author">Author</label><input id="author" value={author} onChange={e=>setAuthor(e.target.value)} placeholder="Your Name" /></div>
                <div className="field"><label htmlFor="license">License</label><select id="license" value={license} onChange={e=>setLicense(e.target.value)}><option>MIT</option><option>Apache-2.0</option><option>GPL-3.0</option><option>ISC</option></select></div>
              </div>
              <div className="field" style={{marginTop:16}}><label htmlFor="desc">Description</label><textarea id="desc" value={description} onChange={e=>setDescription(e.target.value)} placeholder="Short project description" /></div>
            </div>
            <MultiSelectCategory category="frontend" selected={selected.frontend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="backend" selected={selected.backend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="database" selected={selected.database} onToggle={onToggle} />
            <MultiSelectCategory category="tools" selected={selected.tools} onToggle={onToggle} />
            <MultiSelectCategory category="aiFrameworks" selected={selected.aiFrameworks} onToggle={onToggle} />
            <MultiSelectCategory category="llmProviders" selected={selected.llmProviders} onToggle={onToggle} />
            <MultiSelectCategory category="protocols" selected={selected.protocols} onToggle={onToggle} />
          </div>
          <div className={"wizard-step "+(currentStep===3?'active':'')}>
            <div className="section">
              <h2>Summary & Compatibility</h2>
              <p style={{marginTop:-4}}>Review your selections and adjust before generation.</p>
              <div className="grid" style={{marginTop:20}}>
                {Object.keys(CATEGORY_LABELS).map(cat=> cfg[cat] && cfg[cat].length>0 && (
                  <div key={cat}>
                    <strong>{CATEGORY_LABELS[cat]}</strong>: {cfg[cat].join(', ')}
                  </div>
                ))}
              </div>
              <div style={{marginTop:20, display:'grid', gap:12}}>
                {conflicts.map((c,i)=><div key={i} className="error" role="alert"><strong>Conflict:</strong> {c}</div>)}
                {warnings.map((w,i)=><div key={i} className="warning" role="alert"><strong>Note:</strong> {w}</div>)}
                {(!conflicts.length && !warnings.length) && <div className="warning" style={{background:'rgba(33,128,141,0.12)', borderColor:'rgba(33,128,141,0.4)', color:'var(--color-primary)'}}><strong>Great!</strong> No compatibility flags detected.</div>}
              </div>
            </div>
            <div className="section">
              <h2>File Tree Preview</h2>
              <FileTree cfg={cfg} />
            </div>
          </div>
          <div className={"wizard-step "+(currentStep===4?'active':'')}>
            <div className="section">
              <h2>Generated Setup Script</h2>
              <ScriptPreview cfg={cfg} />
              <div style={{marginTop:16, display:'flex', gap:12, flexWrap:'wrap'}}>
                <button onClick={()=>navigator.clipboard.writeText(generateScript(cfg))}>Copy Script</button>
                {/* ZIP export handled in ScriptPreview for modular version */}
              </div>
            </div>
            <div className="section">
              <h2>Next Steps</h2>
              <ol style={{lineHeight:1.6}}>
                <li>Download and run <code>setup.sh</code>.</li>
                <li>Fill in API keys inside <code>.env</code>.</li>
                <li>Activate Python venv if using AI frameworks.</li>
                <li>Start backend & frontend dev servers.</li>
                <li>Build amazing agentic application ðŸš€</li>
              </ol>
            </div>
          </div>
        </div>
        <div className="actions-bar">
          <div className="nav-buttons">
            <button className="secondary" disabled={currentStep===1} onClick={()=>setCurrentStep(s=>Math.max(1,s-1))}>Back</button>
            {currentStep<4 && <button disabled={!canNext()} onClick={()=>setCurrentStep(s=>Math.min(4,s+1))}>{currentStep===3?'Generate':'Next'}</button>}
          </div>
          {currentStep===4 && <button onClick={()=>{setCurrentStep(1); setSelected(emptySelection);}} className="ghost">Start Over</button>}
        </div>
      </div>
      {showTemplates && <TemplateModal onClose={()=>setShowTemplates(false)} applyTemplate={applyTemplate} />}
      <div className="footer-note">GenAppXpress â€“ Instant full-stack & AI agent scaffolding â€¢ v0.1.0</div>

    </div>
  );
}
