import React, { useState, useMemo } from 'react';
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { generateStructure } from './data/techData';
import StepIndicators from './components/StepIndicators';
import Dashboard from './components/Dashboard';
import MultiSelectCategory from './components/MultiSelectCategory';
import TemplateModal from './components/TemplateModal';
import FileTree from './components/FileTree';
import EditorDiff from './components/EditorDiff';
import ScriptPreview from './components/ScriptPreview';
import { TECH_STACK, CATEGORY_LABELS, checkCompatibility, generateScript } from './data/techData';
import { HiOutlineQuestionMarkCircle, HiOutlineSun, HiOutlineMoon, HiOutlineXMark } from 'react-icons/hi2';

const emptySelection = {frontend:[], backend:[], database:[], tools:[], aiFrameworks:[], llmProviders:[], protocols:[]};

/**
 * Main GenAppXpress wizard app
 * - Accessibility: ARIA roles, keyboard navigation
 * - Persistence: localStorage for theme and selections
 * - JSDoc/type comments for all major functions
 */
export default function App() {
  // Routing: 'dashboard' or 'wizard'
  const [view, setView] = useState('dashboard');
  // State hooks with localStorage persistence for theme and templates
  const [currentStep, setCurrentStep] = useState(1); // wizard starts at step 1
  const [projectName, setProjectName] = useState('my-awesome-project');
  const [description, setDescription] = useState('An awesome project generated by GenAppXpress');
  const [author, setAuthor] = useState('');
  const [license, setLicense] = useState('MIT');
  const [showTemplates, setShowTemplates] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [previewFile, setPreviewFile] = useState(() => localStorage.getItem('genappxpress-last-preview') || null);
  const [previewContent, setPreviewContent] = useState('');
  const [originalContent, setOriginalContent] = useState('');
  const [editedOverrides, setEditedOverrides] = useState({});
  const [highlightCssLoaded, setHighlightCssLoaded] = useState(false);
  // Track any templates applied during this session for accurate dashboard metrics
  const [appliedTemplateIds, setAppliedTemplateIds] = useState([]);
  /**
   * Export setup script and config as ZIP file
   * @param {Object} cfg - Project config
   */
  function exportZip(cfg) {
    const zip = new JSZip();
    // Add setup script & raw config
    zip.file('setup.sh', generateScript(cfg));
    zip.file('project.json', JSON.stringify(cfg, null, 2));

    // Build full structure including overrides
    const structure = generateStructure(cfg);

    /** Recursively add files/directories to zip, applying edited overrides */
    function addNodes(node, pathParts=[]) {
      Object.entries(node || {}).forEach(([name, val]) => {
        if (val === undefined) return; // skip undefined optional dirs
        const newParts = pathParts.concat([name]);
        const relPath = newParts.join('/');
        if (typeof val === 'string') {
          // Original content unless overridden
            const fullPath = relPath; // e.g. projectName/README.md
            const content = editedOverrides[fullPath] !== undefined ? editedOverrides[fullPath] : val;
            zip.file(fullPath, content);
        } else if (val && typeof val === 'object') {
          // Directory – ensure folder entry and recurse
          addNodes(val, newParts);
        }
      });
    }
    addNodes(structure, []);

  zip.generateAsync({ type: 'blob' }).then(function(content) {
      saveAs(content, `${cfg.projectName || 'genappxpress'}-setup.zip`);
      // Record history entry (shared with Copy Script action)
      recordHistory(cfg, appliedTemplateIds);
    });
  }

  /**
   * Record a project generation event in history for metrics/dashboard.
   * Used by both Export ZIP and Copy Script to keep stats consistent.
   * @param {Object} cfg - Current project config
   * @param {string[]} templateIdsHint - Template ids applied this session
   */
  function recordHistory(cfg, templateIdsHint = []) {
    try {
      const history = JSON.parse(localStorage.getItem('genappxpress-history')||'[]');
      // Derive templates array with multiple fallbacks
      let templatesArr = [];
      if (Array.isArray(cfg.templates) && cfg.templates.length) {
        templatesArr = cfg.templates;
      } else if (cfg.templateId) {
        templatesArr = [cfg.templateId];
      } else if (templateIdsHint.length) {
        templatesArr = templateIdsHint;
      } else if (cfg.projectName) {
        const match = (TECH_STACK.templates || []).find(t => t.name === cfg.projectName || t.id === cfg.projectName);
        if (match) templatesArr = [match.id];
      }
      // Deduplicate templates just in case
      templatesArr = Array.from(new Set(templatesArr));
      history.push({ id: Date.now().toString(36), date: new Date().toISOString(), ...cfg, templates: templatesArr });
      localStorage.setItem('genappxpress-history', JSON.stringify(history.slice(-50))); // cap to last 50
      window.dispatchEvent(new CustomEvent('genappxpress-history-updated'));
    } catch (e) { /* ignore */ }
  }
  const [darkMode, setDarkMode] = useState(() => {
    const stored = localStorage.getItem('genappxpress-theme');
    if (stored) return stored === 'dark';
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  const [selected, setSelected] = useState(() => {
    const saved = localStorage.getItem('genappxpress-selected');
    return saved ? JSON.parse(saved) : emptySelection;
  });

  /**
   * Toggle selection for a technology category
   * @param {string} category
   * @param {string} id
   */
  function onToggle(category, id) {
    setSelected(function(prev) {
      var list = prev[category];
      var exists = list.indexOf(id) !== -1;
      var updated = { ...prev, [category]: exists ? list.filter(function(x){return x!==id;}) : list.concat(id) };
      localStorage.setItem('genappxpress-selected', JSON.stringify(updated));
      return updated;
    });
  }

  /**
   * Apply a template preset
   * @param {Object} preset
   */
  function applyTemplate(templateObj) {
    // templateObj may be a preset (from modal) or full template; detect shape
    const preset = templateObj.preset || templateObj; // support passing full template
    const normalized = Object.keys(emptySelection).reduce((acc,k)=>{ acc[k] = Array.isArray(preset[k]) ? preset[k] : (selected[k]||[]); return acc; }, {});
    setSelected(normalized);
    localStorage.setItem('genappxpress-selected', JSON.stringify(normalized));
    // If project name hasn't been customized (still default pattern) then set to template id or name
    setProjectName(prevName => {
      const defaultPatterns = ['my-awesome-project','my-project','new-project'];
      if (defaultPatterns.includes(prevName.trim().toLowerCase())) {
        const base = (templateObj.name || templateObj.id || 'project').toString()
          .replace(/[^a-z0-9-_\s]/gi,'')
          .trim()
          .replace(/\s+/g,'-')
          .toLowerCase();
        return base || prevName;
      }
      return prevName; // user already customized
    });
    setShowTemplates(false);
    setView('wizard');
    setCurrentStep(2);
    // Record template usage for later history entry
    const tid = (templateObj.id || templateObj.name || '').toString();
    if (tid && !appliedTemplateIds.includes(tid)) {
      setAppliedTemplateIds(prev => prev.concat([tid]));
    }
  }

  /**
   * Project config object
   */
  const cfg = useMemo(function(){ return { projectName, description, author, license, ...selected }; }, [projectName, description, author, license, selected]);
  const compat = useMemo(function(){ return checkCompatibility(selected); }, [selected]);
  const conflicts = compat.conflicts, warnings = compat.warnings;

  /**
   * Compute incompatibility for tech options
   */
  function computeIncompat(category, item) {
    if (category === 'frontend') {
      if (selected.backend.length) {
        return selected.backend.some(function (b) {
          var back = TECH_STACK.backend.find(function (t) { return t.id === b; });
          var ok = (back && back.compatible && back.compatible.indexOf(item.id) !== -1)
            || (item.compatible && item.compatible.indexOf(b) !== -1)
            || (item.compatible && item.compatible.indexOf('*') !== -1);
          return !ok;
        });
      }
    }
    return false;
  }

  /**
   * Toggle dark/light theme and persist
   */
  function toggleTheme() {
    var mode = !darkMode ? 'dark' : 'light';
    setDarkMode(!darkMode);
    document.documentElement.setAttribute('data-color-scheme', mode);
    localStorage.setItem('genappxpress-theme', mode);
  }

  /**
   * Can proceed to next step?
   */
  function canNext() {
    if (currentStep === 1) return projectName.trim().length > 2;
  if (currentStep === 2) return Object.values(selected).some(function(a){ return Array.isArray(a) && a.length>0; });
    return true;
  }

  /**
   * Keyboard navigation for wizard steps
   */
  React.useEffect(function() {
    function handleKey(e) {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      if (view === 'wizard') {
        if (e.key === 'ArrowRight') setCurrentStep(function(s){return Math.min(4, s + 1);});
        if (e.key === 'ArrowLeft') setCurrentStep(function(s){return Math.max(1, s - 1);});
      }
      if (e.key === 'Escape' && showTemplates) setShowTemplates(false);
    }
    window.addEventListener('keydown', handleKey);
    return function() { window.removeEventListener('keydown', handleKey); };
  }, [showTemplates, view]);

  // Load highlight.js CSS on demand when entering step 3 for first time
  React.useEffect(()=>{
    if(currentStep===3 && !highlightCssLoaded){
      const link=document.createElement('link');
      link.rel='stylesheet';
      link.href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css';
      link.onload=()=>setHighlightCssLoaded(true);
      document.head.appendChild(link);
    }
  },[currentStep, highlightCssLoaded]);

  // When selecting a file, capture original vs edited
  function handleSelectFile(path, content){
    setPreviewFile(path);
    localStorage.setItem('genappxpress-last-preview', path);
    const original = content;
    setOriginalContent(original);
    if(editedOverrides[path]){
      setPreviewContent(editedOverrides[path]);
    } else {
      setPreviewContent(original);
    }
  }

  function handleEditCurrent(newVal){
    setPreviewContent(newVal);
    if(previewFile){
      setEditedOverrides(prev=>({...prev, [previewFile]: newVal}));
    }
  }

  // Dynamic styles for Help modal to ensure proper contrast in dark mode
  const helpContainerStyle = useMemo(()=>({
    zIndex:1000,
    background: darkMode? 'rgba(0,0,0,0.65)':'rgba(0,0,0,0.55)',
    position:'fixed', top:0, left:0, right:0, bottom:0,
    padding:'24px 12px', overflowY:'auto'
  }),[darkMode]);
  const helpContentStyle = useMemo(()=>({
    background: darkMode? '#102428':'#fff',
    color: darkMode? '#d6f2f4':'#222',
    padding:32,
    maxWidth:760,
    margin:'0 auto',
    borderRadius:10,
    boxShadow: darkMode? '0 8px 32px rgba(0,0,0,0.6)':'0 8px 28px rgba(0,0,0,0.25)',
    border: darkMode? '1px solid #1f3d40':'1px solid #e2e5e5',
    lineHeight:1.5
  }),[darkMode]);
  const helpHeadingStyle = { marginTop:0, color: darkMode? '#fff':'#111' };
  const subtleTextStyle = { marginTop:-8, fontSize:14, color: darkMode? '#8fb9bd':'#555' };
  const codeStyle = { background: darkMode? '#163136':'#f3f4f5', padding:'2px 5px', borderRadius:4, fontSize:'0.85em', fontFamily:'monospace' };

  return (
    <div className="app-shell" role="main" aria-label="GenAppXpress">
      <header aria-label="App header">
        <div className="logo" aria-hidden style={{cursor:'pointer'}} onClick={()=>{setView('dashboard'); setCurrentStep(1);}} title="Go to Dashboard">GX</div>
        <div className="title-block" style={{cursor:'pointer'}} onClick={()=>{setView('dashboard'); setCurrentStep(1);}} title="Go to Dashboard">
          <h1>GenAppXpress <span className="pill">Beta</span></h1>
          <div className="tagline">Visual full‑stack & agentic AI scaffolding · Export scripts & project files</div>
        </div>

        <button className="secondary" onClick={()=>setView(view==='dashboard'?'wizard':'dashboard')} aria-label="Go to Dashboard" style={{marginLeft:8}}>{view==='dashboard'?'Scaffold Magic ✨':'Dashboard 🏠'}</button>
        <button className="secondary" onClick={()=>setShowTemplates(true)}>Templates 📋 </button>
        <button className="secondary" onClick={toggleTheme} aria-label="Toggle color theme">
          {darkMode ? <HiOutlineSun size={18} /> : <HiOutlineMoon size={18} />}
        </button>
        <button className="secondary" onClick={()=>setShowHelp(true)} aria-label="Show usage/help"> 
          <HiOutlineQuestionMarkCircle size={18} />
        </button>
      </header>
      {view==='dashboard' ? (
        <Dashboard
          onOpenProject={(p)=>{
            setProjectName(p.projectName);
            const restored = {frontend:p.frontend||[], backend:p.backend||[], database:p.database||[], tools:p.tools||[], aiFrameworks:p.aiFrameworks||[], llmProviders:p.llmProviders||[], protocols:p.protocols||[]};
            setSelected(restored);
            try { localStorage.setItem('genappxpress-selected', JSON.stringify(restored)); } catch(e) { /* ignore */ }
            setView('wizard');
            setCurrentStep(3);
          }}
          onSelectTemplate={(t)=>{
            if(t?.preset){
              const normalized = Object.keys(emptySelection).reduce((acc,k)=>{ acc[k] = Array.isArray(t.preset[k]) ? t.preset[k] : []; return acc; }, {});
              setSelected(normalized);
              localStorage.setItem('genappxpress-selected', JSON.stringify(normalized));
              setView('wizard');
              setCurrentStep(2);
            }
          }}
        />
      ) : (
        <div className="wizard" role="region" aria-label="Wizard Steps">
          <StepIndicators currentStep={currentStep-1} steps={["Project","Tech Stack","Summary","Generate"]} setStep={step=>setCurrentStep(step+1)} />
          <div className="wizard-panels" role="tabpanel" aria-label="Wizard Panels">
            <div className={"wizard-step "+(currentStep===1?'active':'')} role="tabpanel" aria-label="Project Configuration Step">
              <div className="section">
                <h2>Project Configuration</h2>
                <div className="inline-fields">
                  <div className="field"><label htmlFor="name">Project Name</label><input id="name" value={projectName} onChange={e=>setProjectName(e.target.value)} placeholder="my-project" /></div>
                  <div className="field"><label htmlFor="author">Author</label><input id="author" value={author} onChange={e=>setAuthor(e.target.value)} placeholder="Your Name" /></div>
                  <div className="field"><label htmlFor="license">License</label><select id="license" value={license} onChange={e=>setLicense(e.target.value)}><option>MIT</option><option>Apache-2.0</option><option>GPL-3.0</option><option>ISC</option></select></div>
                </div>
                <div className="field" style={{marginTop:16}}><label htmlFor="desc">Description</label><textarea id="desc" value={description} onChange={e=>setDescription(e.target.value)} placeholder="Short project description" /></div>
              </div>
            </div>
            <div className={"wizard-step "+(currentStep===2?'active':'')} role="tabpanel" aria-label="Tech Stack Selection Step">
              <div className="section">
                <h2>Tech Stack Selection</h2>
                <p style={{marginTop:-4}}>Choose your desired frontends, backends, databases, tools, AI frameworks, LLM providers and protocols.</p>
              </div>
              <MultiSelectCategory category="frontend" selected={selected.frontend} onToggle={onToggle} computeIncompat={computeIncompat} />
              <MultiSelectCategory category="backend" selected={selected.backend} onToggle={onToggle} computeIncompat={computeIncompat} />
              <MultiSelectCategory category="database" selected={selected.database} onToggle={onToggle} />
              <MultiSelectCategory category="tools" selected={selected.tools} onToggle={onToggle} />
              <MultiSelectCategory category="aiFrameworks" selected={selected.aiFrameworks} onToggle={onToggle} />
              <MultiSelectCategory category="llmProviders" selected={selected.llmProviders} onToggle={onToggle} />
              <MultiSelectCategory category="protocols" selected={selected.protocols} onToggle={onToggle} />
            </div>
            <div className={"wizard-step "+(currentStep===3?'active':'')} role="tabpanel" aria-label="Summary & Compatibility Step">
              <div className="section">
                <h2>Summary & Compatibility</h2>
                <p style={{marginTop:-4}}>Review your selections and adjust before generation.</p>
                <div className="grid" style={{marginTop:20}}>
                  {Object.keys(CATEGORY_LABELS).map(cat=> cfg[cat] && cfg[cat].length>0 && (
                    <div key={cat}>
                      <strong>{CATEGORY_LABELS[cat]}</strong>: {cfg[cat].join(', ')}
                    </div>
                  ))}
                </div>
                <div style={{marginTop:20, display:'grid', gap:12}}>
                  {conflicts.map((c,i)=><div key={i} className="error" role="alert"><strong>Conflict:</strong> {c}</div>)}
                  {warnings.map((w,i)=><div key={i} className="warning" role="alert"><strong>Note:</strong> {w}</div>)}
                  {(!conflicts.length && !warnings.length) && <div className="warning" style={{background:'rgba(33,128,141,0.12)', borderColor:'rgba(33,128,141,0.4)', color:'var(--color-primary)'}}><strong>Great!</strong> No compatibility flags detected.</div>}
                </div>
              </div>
              <div className="section" aria-label="File Tree and Preview" role="region" style={{marginTop:32}}>
                <h2 style={{marginTop:0}}>File Tree & Preview</h2>
                <div className="file-preview-layout">
                  <div className="file-tree-pane" aria-label="File tree" role="tree">
                    <FileTree cfg={cfg} activeFile={previewFile} onSelect={handleSelectFile} editedOverrides={editedOverrides} />
                  </div>
                  <div className="file-preview-pane" aria-label="File preview" role="group">
                    {previewFile ? (
                      <EditorDiff path={previewFile} original={originalContent} value={previewContent} onChange={handleEditCurrent} />
                    ) : <div className="preview-placeholder">Select a file to preview its contents.</div>}
                  </div>
                </div>
              </div>
            </div>
            <div className={"wizard-step "+(currentStep===4?'active':'')} role="tabpanel" aria-label="Generated Script Step">
              <div className="section">
                <h2>Generated Setup Script</h2>
                <ScriptPreview cfg={cfg} />
                <div style={{marginTop:16, display:'flex', gap:12, flexWrap:'wrap'}}>
                  <button onClick={()=>{
                    // Copy script and record history similarly to exporting a ZIP
                    navigator.clipboard.writeText(generateScript(cfg)).then(()=>{
                      recordHistory(cfg, appliedTemplateIds);
                    }).catch(()=>{
                      // Even if copy fails (permissions), still record to keep metrics consistent
                      recordHistory(cfg, appliedTemplateIds);
                    });
                  }}>Copy Script</button>
                  <button onClick={()=>exportZip(cfg)}>Export ZIP</button>
                </div>
              </div>
              <div className="section">
                <h2>Next Steps</h2>
                <ol style={{lineHeight:1.6}}>
                  <li>Download and run <code>setup.sh</code>.</li>
                  <li>Fill in API keys inside <code>.env</code>.</li>
                  <li>Activate Python venv if using AI frameworks.</li>
                  <li>Start backend & frontend dev servers.</li>
                  <li>Build amazing agentic application 🚀</li>
                </ol>
              </div>
            </div>
          </div>
          <div className="actions-bar">
            <div className="nav-buttons">
              <button className="secondary" disabled={currentStep===1} onClick={()=>setCurrentStep(s=>Math.max(1,s-1))}>Back</button>
              {currentStep<4 && currentStep>=1 && <button disabled={!canNext()} onClick={()=>setCurrentStep(s=>Math.min(4,s+1))}>{currentStep===3?'Generate':'Next'}</button>}
            </div>
            {currentStep===4 && <button onClick={()=>{setView('dashboard'); setSelected(emptySelection); setCurrentStep(1);}} className="ghost">Return to Dashboard</button>}
          </div>
        </div>
      )}
      {showTemplates && <TemplateModal onClose={()=>setShowTemplates(false)} applyTemplate={applyTemplate} />}
      {showHelp && (
        <div className="modal" role="dialog" aria-modal="true" aria-label="Usage Help" style={helpContainerStyle}>
          <div className="modal-content help-modal" style={helpContentStyle}>
            <div style={{display:'flex', justifyContent:'space-between', alignItems:'flex-start', gap:24}}>
              <h2 style={helpHeadingStyle}>GenAppXpress Help & Guide</h2>
              <button onClick={()=>setShowHelp(false)} className="secondary" aria-label="Close Help" style={{alignSelf:'flex-start'}}>
                <HiOutlineXMark size={18} />
              </button>
            </div>
            <p style={subtleTextStyle}>Version 0.1.0 · Rapid full‑stack + agentic AI project scaffolding. This guide summarizes how to use the dashboard & wizard effectively.</p>
            <h3 style={{marginTop:24}}>1. Quick Start</h3>
            <ol style={{lineHeight:1.55, paddingLeft:20}}>
              <li>Click <b>Generate App</b> (or pick a template from Dashboard).</li>
              <li>Step 1: Enter project meta (name, author, license, description).</li>
              <li>Step 2: Select tech per category OR apply a <b>Template</b> preset.</li>
              <li>Step 3: Review compatibility notices & inspect generated file tree (you can live‑edit files before export).</li>
              <li>Step 4: Copy or export the setup script + full ZIP (includes edits).</li>
            </ol>
            <h3 style={{marginTop:24}}>2. Templates vs. Custom Selection</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li><b>Templates</b> instantly load a curated stack (frontend, backend, AI framework, provider, protocol).</li>
              <li>When a single template is chosen, script generation narrows dependencies to that preset.</li>
              <li>You can still adjust individual categories after applying a template.</li>
            </ul>
            <h3 style={{marginTop:24}}>3. Compatibility & Warnings</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li><b>Conflicts</b> highlight potentially unsupported frontend ⇄ backend pairs.</li>
              <li><b>Notes</b> indicate unvalidated AI framework + provider combinations or protocol suggestions.</li>
              <li>No entries = green state banner.</li>
            </ul>
            <h3 style={{marginTop:24}}>4. Generated Artifacts</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li><code style={codeStyle}>setup.sh</code>: Installs Node deps; if Python parts exist, creates <code style={codeStyle}>.venv</code> & installs frameworks/providers.</li>
              <li><code style={codeStyle}>package.json</code>: Scripts for frontend (<code style={codeStyle}>dev</code>) & backend (<code style={codeStyle}>server</code>) plus <code style={codeStyle}>dev:full</code> if both exist.</li>
              <li><code style={codeStyle}>requirements.txt</code>: Only when Python services or AI frameworks/providers are selected.</li>
              <li><code style={codeStyle}>.env</code>: Placeholder API key variables for chosen LLM providers.</li>
              <li><code style={codeStyle}>agents/</code>: Sample agent or framework starters (LangChain, CrewAI, etc.).</li>
              <li><code style={codeStyle}>server/</code> or <code style={codeStyle}>api/</code>: Express or FastAPI service with optional chat/RAG routes.</li>
              <li>Template enhancements: Extra docs, sample scripts, endpoints (e.g. RAG, Web Research, Multimodal Vision).</li>
            </ul>
            <h3 style={{marginTop:24}}>5. Editing Before Export</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li>Select a file in Step 3 to preview & inline edit. Your changes persist in this session until reload.</li>
              <li>Edits override generated defaults inside the exported ZIP.</li>
              <li>Use this to fine‑tune README, environment hints, or starter code.</li>
            </ul>
            <h3 style={{marginTop:24}}>6. Running the Project</h3>
            <ol style={{lineHeight:1.55, paddingLeft:20}}>
              <li><code style={codeStyle}>bash setup.sh</code> (or make executable with <code style={codeStyle}>chmod +x setup.sh</code>).</li>
              <li>Add API keys to <code style={codeStyle}>.env</code> (OPENAI_API_KEY, ANTHROPIC_API_KEY, etc.).</li>
              <li>If Python components: <code style={codeStyle}>source .venv/bin/activate</code>.</li>
              <li>Start dev servers: <code style={codeStyle}>npm run dev</code>, <code style={codeStyle}>npm run server</code>, or <code style={codeStyle}>npm run dev:full</code>.</li>
              <li>Run agents/examples: <code style={codeStyle}>python agents/run_all_agents.py</code> or individual scripts.</li>
            </ol>
            <h3 style={{marginTop:24}}>7. Keyboard & Accessibility</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li><b>← / →</b> Navigate wizard steps.</li>
              <li><b>Esc</b> Close modals (Templates, Help).</li>
              <li>Tab order honors logical reading flow; landmark roles used for screen readers.</li>
            </ul>
            <h3 style={{marginTop:24}}>8. Troubleshooting</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li><b>Missing Python deps?</b> Ensure virtualenv activated before running agents.</li>
              <li><b>OpenAI errors?</b> Confirm API key + correct model names (defaults use gpt-4o-mini placeholder).</li>
              <li><b>Port collisions?</b> Change Express port via <code>PORT=</code> in environment.</li>
              <li><b>Ollama not responding?</b> Start local runtime (<code>ollama run llama3</code>) and set <code>OLLAMA_HOST</code> if remote.</li>
            </ul>
            <h3 style={{marginTop:24}}>9. Extending</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li>Add new templates by appending to <code style={codeStyle}>templates</code> in <code style={codeStyle}>techData.js</code>.</li>
              <li>Inject extra compatibility logic inside <code style={codeStyle}>checkCompatibility</code>.</li>
              <li>Generate additional scaffolds by enhancing <code style={codeStyle}>generateStructure()</code>.</li>
            </ul>
            <h3 style={{marginTop:24}}>10. Roadmap Ideas</h3>
            <ul style={{lineHeight:1.5, paddingLeft:20}}>
              <li>Template search & filtering.</li>
              <li>Collapsible category groups in wizard.</li>
              <li>One‑click deploy recipes (Docker / edge).</li>
              <li>Semantic diff & AI refactor suggestions.</li>
            </ul>
            <div style={{marginTop:32, fontSize:12, color: darkMode? '#5f8b8f':'#666'}}>Generated help content – refine or customize directly in <code style={codeStyle}>App.jsx</code>. Feedback welcomed.</div>
            <div style={{display:'flex', justifyContent:'flex-end', marginTop:16}}>
               <button onClick={()=>setShowHelp(false)} className="secondary" aria-label="Close Help" style={{alignSelf:'flex-start'}}>
                <HiOutlineXMark size={18} />
              </button>
            </div>
          </div>
        </div>
      )}
      <div className="footer-note">GenAppXpress – Instant full-stack & AI agent scaffolding • v0.1.0</div>
    </div>
  );
}
