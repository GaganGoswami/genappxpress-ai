import React, { useState, useMemo } from 'react';
import StepIndicators from './components/StepIndicators';
import MultiSelectCategory from './components/MultiSelectCategory';
import TemplateModal from './components/TemplateModal';
import FileTree from './components/FileTree';
import ScriptPreview from './components/ScriptPreview';
import { TECH_STACK, CATEGORY_LABELS, checkCompatibility, generateStructure, generateScript, flattenStructure } from './data/techData';
import './index.css';

const emptySelection = {frontend:[], backend:[], database:[], tools:[], aiFrameworks:[], llmProviders:[], protocols:[]};

export default function App() {
  const [currentStep,setCurrentStep]=useState(1);
  const [projectName,setProjectName]=useState('my-awesome-project');
  const [description,setDescription]=useState('An awesome project generated by GenAppXpress');
  const [author,setAuthor]=useState('');
  const [license,setLicense]=useState('MIT');
  const [showTemplates,setShowTemplates]=useState(false);
  const [darkMode,setDarkMode]=useState(window.matchMedia('(prefers-color-scheme: dark)').matches);
  const [selected,setSelected]=useState(emptySelection);

  const onToggle=(category,id)=>{setSelected(prev=>{const list=prev[category]; const exists=list.includes(id); return {...prev,[category]: exists? list.filter(x=>x!==id): [...list,id]};});};
  const applyTemplate = (preset)=>{ setSelected(prev=> ({...prev, ...Object.fromEntries(Object.keys(emptySelection).map(k=>[k, preset[k] || prev[k]]))})); setShowTemplates(false); };

  const cfg = useMemo(()=>({projectName, description, author, license, ...selected}),[projectName, description, author, license, selected]);
  const {conflicts,warnings}=useMemo(()=>checkCompatibility(selected),[selected]);

  const computeIncompat=(category,item)=>{ if(category==='frontend'){ if(selected.backend.length){ return selected.backend.some(b=>{const back=TECH_STACK.backend.find(t=>t.id===b); const ok = back?.compatible.includes(item.id) || item.compatible.includes(b) || item.compatible.includes('*'); return !ok;}); }} return false; };

  const toggleTheme=()=>{const mode = !darkMode?'dark':'light'; setDarkMode(!darkMode); document.documentElement.setAttribute('data-color-scheme',mode); localStorage.setItem('genappxpress-theme',mode);};

  const canNext = () => {
    if(currentStep===1) return projectName.trim().length>2; if(currentStep===2) return Object.values(selected).some(a=>a.length); return true; };

  return (
    <div className="app-shell">
      <header>
        <div className="logo" aria-hidden>GX</div>
        <div className="title-block">
          <h1>GenAppXpress <span className="pill">ALPHA</span></h1>
          <div className="tagline">Visual fullâ€‘stack & agentic AI scaffolding Â· Export scripts & project files</div>
        </div>
        <button className="theme-toggle" onClick={toggleTheme} aria-label="Toggle color theme">{darkMode? 'Light Mode':'Dark Mode'}</button>
        <button className="secondary" onClick={()=>setShowTemplates(true)}>Templates</button>
      </header>
      <div className="wizard">
        <StepIndicators currentStep={currentStep} steps={["Project","Tech Stack","Summary","Generate"]} setStep={setCurrentStep} />
        <div className="wizard-panels">
          <div className={"wizard-step "+(currentStep===1?'active':'')}>
            <div className="section">
              <h2>Project Configuration</h2>
              <div className="inline-fields">
                <div className="field"><label htmlFor="name">Project Name</label><input id="name" value={projectName} onChange={e=>setProjectName(e.target.value)} placeholder="my-project" /></div>
                <div className="field"><label htmlFor="author">Author</label><input id="author" value={author} onChange={e=>setAuthor(e.target.value)} placeholder="Your Name" /></div>
                <div className="field"><label htmlFor="license">License</label><select id="license" value={license} onChange={e=>setLicense(e.target.value)}><option>MIT</option><option>Apache-2.0</option><option>GPL-3.0</option><option>ISC</option></select></div>
              </div>
              <div className="field" style={{marginTop:16}}><label htmlFor="desc">Description</label><textarea id="desc" value={description} onChange={e=>setDescription(e.target.value)} placeholder="Short project description" /></div>
            </div>
          </div>
          <div className={"wizard-step "+(currentStep===2?'active':'')}>
            <MultiSelectCategory category="frontend" selected={selected.frontend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="backend" selected={selected.backend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="database" selected={selected.database} onToggle={onToggle} />
            <MultiSelectCategory category="tools" selected={selected.tools} onToggle={onToggle} />
            <MultiSelectCategory category="aiFrameworks" selected={selected.aiFrameworks} onToggle={onToggle} />
            <MultiSelectCategory category="llmProviders" selected={selected.llmProviders} onToggle={onToggle} />
            <MultiSelectCategory category="protocols" selected={selected.protocols} onToggle={onToggle} />
          </div>
          <div className={"wizard-step "+(currentStep===3?'active':'')}>
            <div className="section">
              <h2>Summary & Compatibility</h2>
              <p style={{marginTop:-4}}>Review your selections and adjust before generation.</p>
              <div className="grid" style={{marginTop:20}}>
                {Object.keys(CATEGORY_LABELS).map(cat=> cfg[cat] && cfg[cat].length>0 && (
                  <div key={cat}>
                    <strong>{CATEGORY_LABELS[cat]}</strong>: {cfg[cat].join(', ')}
                  </div>
                ))}
              </div>
              <div style={{marginTop:20, display:'grid', gap:12}}>
                {conflicts.map((c,i)=><div key={i} className="error" role="alert"><strong>Conflict:</strong> {c}</div>)}
                {warnings.map((w,i)=><div key={i} className="warning" role="alert"><strong>Note:</strong> {w}</div>)}
                {(!conflicts.length && !warnings.length) && <div className="warning" style={{background:'rgba(33,128,141,0.12)', borderColor:'rgba(33,128,141,0.4)', color:'var(--color-primary)'}}><strong>Great!</strong> No compatibility flags detected.</div>}
              </div>
            </div>
            <div className="section">
              <h2>File Tree Preview</h2>
              <FileTree cfg={cfg} />
            </div>
          </div>
          <div className={"wizard-step "+(currentStep===4?'active':'')}>
            <div className="section">
              <h2>Generated Setup Script</h2>
              <ScriptPreview cfg={cfg} />
              <div style={{marginTop:16, display:'flex', gap:12, flexWrap:'wrap'}}>
                <button onClick={()=>navigator.clipboard.writeText(generateScript(cfg))}>Copy Script</button>
                {/* ZIP export handled in ScriptPreview for modular version */}
              </div>
            </div>
            <div className="section">
              <h2>Next Steps</h2>
              <ol style={{lineHeight:1.6}}>
                <li>Download and run <code>setup.sh</code>.</li>
                <li>Fill in API keys inside <code>.env</code>.</li>
                <li>Activate Python venv if using AI frameworks.</li>
                <li>Start backend & frontend dev servers.</li>
                <li>Build amazing agentic application ðŸš€</li>
              </ol>
            </div>
          </div>
        </div>
        <div className="actions-bar">
          <div className="nav-buttons">
            <button className="secondary" disabled={currentStep===1} onClick={()=>setCurrentStep(s=>Math.max(1,s-1))}>Back</button>
            {currentStep<4 && <button disabled={!canNext()} onClick={()=>setCurrentStep(s=>Math.min(4,s+1))}>{currentStep===3?'Generate':'Next'}</button>}
          </div>
          {currentStep===4 && <button onClick={()=>{setCurrentStep(1); setSelected(emptySelection);}} className="ghost">Start Over</button>}
        </div>
      </div>
      {showTemplates && <TemplateModal onClose={()=>setShowTemplates(false)} applyTemplate={applyTemplate} />}
      <div className="footer-note">GenAppXpress â€“ Instant full-stack & AI agent scaffolding â€¢ v0.1.0</div>
    </div>
  );
}
