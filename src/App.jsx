import React, { useState, useMemo } from 'react';
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { generateStructure } from './data/techData';
import StepIndicators from './components/StepIndicators';
import Dashboard from './components/Dashboard';
import MultiSelectCategory from './components/MultiSelectCategory';
import TemplateModal from './components/TemplateModal';
import FileTree from './components/FileTree';
import EditorDiff from './components/EditorDiff';
import ScriptPreview from './components/ScriptPreview';
import { TECH_STACK, CATEGORY_LABELS, checkCompatibility, generateScript } from './data/techData';

const emptySelection = {frontend:[], backend:[], database:[], tools:[], aiFrameworks:[], llmProviders:[], protocols:[]};

/**
 * Main GenAppXpress wizard app
 * - Accessibility: ARIA roles, keyboard navigation
 * - Persistence: localStorage for theme and selections
 * - JSDoc/type comments for all major functions
 */
export default function App() {
  // State hooks with localStorage persistence for theme and templates
  const [currentStep, setCurrentStep] = useState(0); // 0 = dashboard
  const [projectName, setProjectName] = useState('my-awesome-project');
  const [description, setDescription] = useState('An awesome project generated by GenAppXpress');
  // Force Dashboard on initial mount
  React.useEffect(() => {
    setCurrentStep(0);
  }, []);
  console.log('GenAppXpress: currentStep', currentStep);
  const [author, setAuthor] = useState('');
  const [license, setLicense] = useState('MIT');
  const [showTemplates, setShowTemplates] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [previewFile, setPreviewFile] = useState(() => localStorage.getItem('genappxpress-last-preview') || null);
  const [previewContent, setPreviewContent] = useState('');
  const [originalContent, setOriginalContent] = useState('');
  const [editedOverrides, setEditedOverrides] = useState({});
  const [highlightCssLoaded, setHighlightCssLoaded] = useState(false);
  /**
   * Export setup script and config as ZIP file
   * @param {Object} cfg - Project config
   */
  function exportZip(cfg) {
    const zip = new JSZip();
    // Add setup script & raw config
    zip.file('setup.sh', generateScript(cfg));
    zip.file('project.json', JSON.stringify(cfg, null, 2));

    // Build full structure including overrides
    const structure = generateStructure(cfg);

    /** Recursively add files/directories to zip, applying edited overrides */
    function addNodes(node, pathParts=[]) {
      Object.entries(node || {}).forEach(([name, val]) => {
        if (val === undefined) return; // skip undefined optional dirs
        const newParts = pathParts.concat([name]);
        const relPath = newParts.join('/');
        if (typeof val === 'string') {
          // Original content unless overridden
            const fullPath = relPath; // e.g. projectName/README.md
            const content = editedOverrides[fullPath] !== undefined ? editedOverrides[fullPath] : val;
            zip.file(fullPath, content);
        } else if (val && typeof val === 'object') {
          // Directory – ensure folder entry and recurse
          addNodes(val, newParts);
        }
      });
    }
    addNodes(structure, []);

    zip.generateAsync({ type: 'blob' }).then(function(content) {
      saveAs(content, `${cfg.projectName || 'genappxpress'}-setup.zip`);
      // Record history entry
      try {
        const history = JSON.parse(localStorage.getItem('genappxpress-history')||'[]');
        history.push({ id: Date.now().toString(36), date: new Date().toISOString(), ...cfg });
        localStorage.setItem('genappxpress-history', JSON.stringify(history.slice(-50))); // cap
      } catch(e) { /* ignore */ }
    });
  }
  const [darkMode, setDarkMode] = useState(() => {
    const stored = localStorage.getItem('genappxpress-theme');
    if (stored) return stored === 'dark';
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  const [selected, setSelected] = useState(() => {
    const saved = localStorage.getItem('genappxpress-selected');
    return saved ? JSON.parse(saved) : emptySelection;
  });

  /**
   * Toggle selection for a technology category
   * @param {string} category
   * @param {string} id
   */
  function onToggle(category, id) {
    setSelected(function(prev) {
      var list = prev[category];
      var exists = list.indexOf(id) !== -1;
      var updated = { ...prev, [category]: exists ? list.filter(function(x){return x!==id;}) : list.concat(id) };
      localStorage.setItem('genappxpress-selected', JSON.stringify(updated));
      return updated;
    });
  }

  /**
   * Apply a template preset
   * @param {Object} preset
   */
  function applyTemplate(preset) {
    var updated = { ...selected };
    Object.keys(emptySelection).forEach(function(k){ updated[k] = preset[k] || selected[k]; });
    setSelected(updated);
    localStorage.setItem('genappxpress-selected', JSON.stringify(updated));
    setShowTemplates(false);
  }

  /**
   * Project config object
   */
  const cfg = useMemo(function(){ return { projectName, description, author, license, ...selected }; }, [projectName, description, author, license, selected]);
  const compat = useMemo(function(){ return checkCompatibility(selected); }, [selected]);
  const conflicts = compat.conflicts, warnings = compat.warnings;

  /**
   * Compute incompatibility for tech options
   */
  function computeIncompat(category, item) {
    if (category === 'frontend') {
      if (selected.backend.length) {
        return selected.backend.some(function (b) {
          var back = TECH_STACK.backend.find(function (t) { return t.id === b; });
          var ok = (back && back.compatible && back.compatible.indexOf(item.id) !== -1)
            || (item.compatible && item.compatible.indexOf(b) !== -1)
            || (item.compatible && item.compatible.indexOf('*') !== -1);
          return !ok;
        });
      }
    }
    return false;
  }

  /**
   * Toggle dark/light theme and persist
   */
  function toggleTheme() {
    var mode = !darkMode ? 'dark' : 'light';
    setDarkMode(!darkMode);
    document.documentElement.setAttribute('data-color-scheme', mode);
    localStorage.setItem('genappxpress-theme', mode);
  }

  /**
   * Can proceed to next step?
   */
  function canNext() {
    if (currentStep === 1) return projectName.trim().length > 2;
    if (currentStep === 2) return Object.values(selected).some(function(a){return a.length;});
    return true;
  }

  /**
   * Keyboard navigation for wizard steps
   */
  React.useEffect(function() {
    function handleKey(e) {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
  if (e.key === 'ArrowRight') setCurrentStep(function(s){return Math.min(4, s + 1);});
  if (e.key === 'ArrowLeft') setCurrentStep(function(s){return Math.max(0, s - 1);});
      if (e.key === 'Escape' && showTemplates) setShowTemplates(false);
    }
    window.addEventListener('keydown', handleKey);
    return function() { window.removeEventListener('keydown', handleKey); };
  }, [showTemplates]);

  // Load highlight.js CSS on demand when entering step 3 for first time
  React.useEffect(()=>{
    if(currentStep===3 && !highlightCssLoaded){
      const link=document.createElement('link');
      link.rel='stylesheet';
      link.href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css';
      link.onload=()=>setHighlightCssLoaded(true);
      document.head.appendChild(link);
    }
  },[currentStep, highlightCssLoaded]);

  // When selecting a file, capture original vs edited
  function handleSelectFile(path, content){
    setPreviewFile(path);
    localStorage.setItem('genappxpress-last-preview', path);
    const original = content;
    setOriginalContent(original);
    if(editedOverrides[path]){
      setPreviewContent(editedOverrides[path]);
    } else {
      setPreviewContent(original);
    }
  }

  function handleEditCurrent(newVal){
    setPreviewContent(newVal);
    if(previewFile){
      setEditedOverrides(prev=>({...prev, [previewFile]: newVal}));
    }
  }

  return (
    <div className="app-shell" role="main" aria-label="GenAppXpress Wizard">
  <header aria-label="App header">
        <div className="logo" aria-hidden>GX</div>
        <div className="title-block">
          <h1>GenAppXpress <span className="pill">ALPHA</span></h1>
          <div className="tagline">Visual full‑stack & agentic AI scaffolding · Export scripts & project files</div>
        </div>
        <button className="theme-toggle" onClick={toggleTheme} aria-label="Toggle color theme">{darkMode? 'Light Mode':'Dark Mode'}</button>
  <button className="secondary" onClick={()=>setShowTemplates(true)}>Templates</button>
  <button className="secondary" onClick={()=>setShowHelp(true)} aria-label="Show usage/help">Help</button>
      </header>
  <div className="wizard" role="region" aria-label="Wizard Steps">
        <StepIndicators currentStep={currentStep} steps={["Home","Project","Tech Stack","Summary","Generate"]} setStep={setCurrentStep} />
  <div className="wizard-panels" role="tabpanel" aria-label="Wizard Panels">
          <div className={"wizard-step "+(currentStep===0?'active':'')} role="tabpanel" aria-label="Dashboard Step">
            <Dashboard onOpenProject={(p)=>{ setProjectName(p.projectName); setSelected({frontend:p.frontend||[], backend:p.backend||[], database:p.database||[], tools:p.tools||[], aiFrameworks:p.aiFrameworks||[], llmProviders:p.llmProviders||[], protocols:p.protocols||[]}); setCurrentStep(3); }} onSelectTemplate={(t)=>{ if(t?.preset){ const preset=t.preset; const updated={...selected}; Object.keys(emptySelection).forEach(k=>{ updated[k]=preset[k]||updated[k]; }); setSelected(updated); localStorage.setItem('genappxpress-selected', JSON.stringify(updated)); setCurrentStep(2);} }} />
          </div>
          <div className={"wizard-step "+(currentStep===1?'active':'')} role="tabpanel" aria-label="Project Configuration Step">
            <div className="section">
              <h2>Project Configuration</h2>
              <div className="inline-fields">
                <div className="field"><label htmlFor="name">Project Name</label><input id="name" value={projectName} onChange={e=>setProjectName(e.target.value)} placeholder="my-project" /></div>
                <div className="field"><label htmlFor="author">Author</label><input id="author" value={author} onChange={e=>setAuthor(e.target.value)} placeholder="Your Name" /></div>
                <div className="field"><label htmlFor="license">License</label><select id="license" value={license} onChange={e=>setLicense(e.target.value)}><option>MIT</option><option>Apache-2.0</option><option>GPL-3.0</option><option>ISC</option></select></div>
              </div>
              <div className="field" style={{marginTop:16}}><label htmlFor="desc">Description</label><textarea id="desc" value={description} onChange={e=>setDescription(e.target.value)} placeholder="Short project description" /></div>
            </div>
          </div>
          <div className={"wizard-step "+(currentStep===2?'active':'')} role="tabpanel" aria-label="Tech Stack Selection Step">
            <div className="section">
              <h2>Tech Stack Selection</h2>
              <p style={{marginTop:-4}}>Choose your desired frontends, backends, databases, tools, AI frameworks, LLM providers and protocols.</p>
            </div>
            <MultiSelectCategory category="frontend" selected={selected.frontend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="backend" selected={selected.backend} onToggle={onToggle} computeIncompat={computeIncompat} />
            <MultiSelectCategory category="database" selected={selected.database} onToggle={onToggle} />
            <MultiSelectCategory category="tools" selected={selected.tools} onToggle={onToggle} />
            <MultiSelectCategory category="aiFrameworks" selected={selected.aiFrameworks} onToggle={onToggle} />
            <MultiSelectCategory category="llmProviders" selected={selected.llmProviders} onToggle={onToggle} />
            <MultiSelectCategory category="protocols" selected={selected.protocols} onToggle={onToggle} />
          </div>
          <div className={"wizard-step "+(currentStep===3?'active':'')} role="tabpanel" aria-label="Summary & Compatibility Step">
            <div className="section">
              <h2>Summary & Compatibility</h2>
              <p style={{marginTop:-4}}>Review your selections and adjust before generation.</p>
              <div className="grid" style={{marginTop:20}}>
                {Object.keys(CATEGORY_LABELS).map(cat=> cfg[cat] && cfg[cat].length>0 && (
                  <div key={cat}>
                    <strong>{CATEGORY_LABELS[cat]}</strong>: {cfg[cat].join(', ')}
                  </div>
                ))}
              </div>
              <div style={{marginTop:20, display:'grid', gap:12}}>
                {conflicts.map((c,i)=><div key={i} className="error" role="alert"><strong>Conflict:</strong> {c}</div>)}
                {warnings.map((w,i)=><div key={i} className="warning" role="alert"><strong>Note:</strong> {w}</div>)}
                {(!conflicts.length && !warnings.length) && <div className="warning" style={{background:'rgba(33,128,141,0.12)', borderColor:'rgba(33,128,141,0.4)', color:'var(--color-primary)'}}><strong>Great!</strong> No compatibility flags detected.</div>}
              </div>
            </div>
            <div className="section" aria-label="File Tree and Preview" role="region" style={{marginTop:32}}>
              <h2 style={{marginTop:0}}>File Tree & Preview</h2>
              <div className="file-preview-layout">
                <div className="file-tree-pane" aria-label="File tree" role="tree">
                  <FileTree cfg={cfg} activeFile={previewFile} onSelect={handleSelectFile} editedOverrides={editedOverrides} />
                </div>
                <div className="file-preview-pane" aria-label="File preview" role="group">
                  {previewFile ? (
                    <EditorDiff path={previewFile} original={originalContent} value={previewContent} onChange={handleEditCurrent} />
                  ) : <div className="preview-placeholder">Select a file to preview its contents.</div>}
                </div>
              </div>
            </div>
          </div>
          <div className={"wizard-step "+(currentStep===4?'active':'')} role="tabpanel" aria-label="Generated Script Step">
            <div className="section">
              <h2>Generated Setup Script</h2>
              <ScriptPreview cfg={cfg} />
              <div style={{marginTop:16, display:'flex', gap:12, flexWrap:'wrap'}}>
                <button onClick={()=>navigator.clipboard.writeText(generateScript(cfg))}>Copy Script</button>
                <button onClick={()=>exportZip(cfg)}>Export ZIP</button>
              </div>
            </div>
            <div className="section">
              <h2>Next Steps</h2>
              <ol style={{lineHeight:1.6}}>
                <li>Download and run <code>setup.sh</code>.</li>
                <li>Fill in API keys inside <code>.env</code>.</li>
                <li>Activate Python venv if using AI frameworks.</li>
                <li>Start backend & frontend dev servers.</li>
                <li>Build amazing agentic application 🚀</li>
              </ol>
            </div>
          </div>
        </div>
        <div className="actions-bar">
          <div className="nav-buttons">
            <button className="secondary" disabled={currentStep===0} onClick={()=>setCurrentStep(s=>Math.max(0,s-1))}>Back</button>
            {currentStep<4 && currentStep>0 && <button disabled={!canNext()} onClick={()=>setCurrentStep(s=>Math.min(4,s+1))}>{currentStep===3?'Generate':'Next'}</button>}
            {currentStep===0 && <button onClick={()=>setCurrentStep(1)}>Start</button>}
          </div>
          {currentStep===4 && <button onClick={()=>{setCurrentStep(0); setSelected(emptySelection);}} className="ghost">Return Home</button>}
        </div>
      </div>
      {showTemplates && <TemplateModal onClose={()=>setShowTemplates(false)} applyTemplate={applyTemplate} />}
      {showHelp && (
        <div className="modal" role="dialog" aria-modal="true" aria-label="Usage Help" style={{zIndex:1000, background:'rgba(0,0,0,0.5)', position:'fixed', top:0, left:0, right:0, bottom:0}}>
          <div className="modal-content" style={{background:'#fff', padding:32, maxWidth:500, margin:'40px auto', borderRadius:8}}>
            <h2>GenAppXpress Usage Example</h2>
            <ol style={{lineHeight:1.7}}>
              <li>Fill in your project details and select technologies for each category.</li>
              <li>Use <b>Templates</b> for quick presets.</li>
              <li>Review compatibility and file tree preview.</li>
              <li>Generate and export setup scripts and files.</li>
              <li>Use keyboard navigation: <b>←</b>/<b>→</b> for steps, <b>Esc</b> to close modals.</li>
            </ol>
            <button onClick={()=>setShowHelp(false)} style={{marginTop:24}}>Close</button>
          </div>
        </div>
      )}
      <div className="footer-note">GenAppXpress – Instant full-stack & AI agent scaffolding • v0.1.0</div>

    </div>
  );
}
